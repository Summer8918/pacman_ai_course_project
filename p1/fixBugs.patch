diff --git a/__pycache__/searchAgents.cpython-36.pyc b/__pycache__/searchAgents.cpython-36.pyc
index d9be3c0..77c3f11 100644
Binary files a/__pycache__/searchAgents.cpython-36.pyc and b/__pycache__/searchAgents.cpython-36.pyc differ
diff --git a/__pycache__/searchTestClasses.cpython-36.pyc b/__pycache__/searchTestClasses.cpython-36.pyc
index 90a94e8..048f881 100644
Binary files a/__pycache__/searchTestClasses.cpython-36.pyc and b/__pycache__/searchTestClasses.cpython-36.pyc differ
diff --git a/search.py b/search.py
index 8ea79a9..f438151 100644
--- a/search.py
+++ b/search.py
@@ -126,22 +126,39 @@ def depthFirstSearch(problem):
     # print("actions", actions)
     return actions
 
+def tupleToStr(ts):
+    elements_str = ''
+    for t in ts:
+        #print("type:", type(t))
+        if isinstance(t, tuple):
+            elements_str += ' '.join(str(item) for item in t)
+        elif isinstance(t, list):
+            elements_str += ', '.join(str(item) for item in t)
+        else:
+            elements_str += str(t)
+    return elements_str
+
 def breadthFirstSearch(problem):
     """Search the shallowest nodes in the search tree first."""
     "*** YOUR CODE HERE ***"
     fringe = util.Queue()
     state = problem.getStartState()
+    print("state:", state)
+    print("type:", type(state))
+    
     cur = childNode((state, None, None), None)
     fringe.push(cur)
     visited = set()
     while fringe.isEmpty() is False:
         cur = fringe.pop()
-        if cur.state in visited:
+        stateStr = tupleToStr(cur.state)
+        if stateStr in visited:
             continue
-        visited.add(cur.state)
+        visited.add(stateStr)
         if problem.isGoalState(cur.state):
             break
         successors = problem.getSuccessors(cur.state)
+        print()
         for successor in successors:
             if successor[0] not in visited:
                 node = childNode(successor, cur)
diff --git a/searchAgents.py b/searchAgents.py
index c1cd213..51f20ea 100644
--- a/searchAgents.py
+++ b/searchAgents.py
@@ -109,7 +109,8 @@ class SearchAgent(Agent):
 
         state: a GameState object (pacman.py)
         """
-        if self.searchFunction == None: raise Exception("No search function provided for SearchAgent")
+        if self.searchFunction == None:
+            raise Exception("No search function provided for SearchAgent")
         starttime = time.time()
         problem = self.searchType(state) # Makes a new search problem
         self.actions  = self.searchFunction(problem) # Find a path
@@ -165,6 +166,7 @@ class PositionSearchProblem(search.SearchProblem):
         self._visited, self._visitedlist, self._expanded = {}, [], 0 # DO NOT CHANGE
 
     def getStartState(self):
+        print("getStartState in search agents")
         return self.startState
 
     def isGoalState(self, state):
@@ -295,7 +297,8 @@ class CornersProblem(search.SearchProblem):
         space)
         """
         "*** YOUR CODE HERE ***"
-        return (self.startingPosition, [])
+        print("getStartState, CornersProblem")
+        return (self.startingPosition)
 
         #util.raiseNotDefined()
 
@@ -338,7 +341,7 @@ class CornersProblem(search.SearchProblem):
 
             "*** YOUR CODE HERE ***"
             x, y = position
-            dx, dy = Directions.directionToVector(action)
+            dx, dy = Actions.directionToVector(action)
             next_x, next_y = int(x + dx), int(y + dy)
             hits_wall = self.walls[next_x][next_y]
             
@@ -434,6 +437,7 @@ class FoodSearchProblem:
         self.heuristicInfo = {} # A dictionary for the heuristic to store information
 
     def getStartState(self):
+        print("FoodSearchProblem getStartState")
         return self.start
 
     def isGoalState(self, state):
